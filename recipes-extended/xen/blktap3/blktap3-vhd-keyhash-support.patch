Index: blktap3/include/libvhd.h
===================================================================
--- blktap3.orig/include/libvhd.h
+++ blktap3/include/libvhd.h
@@ -281,6 +281,8 @@ int vhd_hidden(vhd_context_t *, int *);
 int vhd_chain_depth(vhd_context_t *, int *);
 int vhd_marker(vhd_context_t *, char *);   
 int vhd_set_marker(vhd_context_t *, char); 
+int vhd_get_keyhash(vhd_context_t *, struct vhd_keyhash *);
+int vhd_set_keyhash(vhd_context_t *, const struct vhd_keyhash *);
 
 off64_t vhd_position(vhd_context_t *);
 int vhd_seek(vhd_context_t *, off64_t, int);
Index: blktap3/include/vhd.h
===================================================================
--- blktap3.orig/include/vhd.h
+++ blktap3/include/vhd.h
@@ -156,6 +156,12 @@ static const char DD_COOKIE[9]  =  "cxsp
 
 #define DD_BLK_UNUSED 0xFFFFFFFF
 
+struct vhd_keyhash {
+  uint8_t cookie;         /* 1 if keyhash is set, 0 otherwise            */
+  uint8_t nonce[32];      /* arbitrary 256 bit nonce                     */
+  uint8_t hash[32];       /* SHA256 sum of nonce appended by keyhash     */
+};
+
 struct dd_batmap_hdr {
   char        cookie[8];       /* should contain "tdbatmap"                    */
   uint64_t    batmap_offset;   /* byte offset to batmap                        */
@@ -163,6 +169,8 @@ struct dd_batmap_hdr {
   uint32_t    batmap_version;  /* version of batmap                            */
   uint32_t    checksum;        /* batmap checksum -- 1's complement of batmap  */
   char        marker;          /* generic marker field                         */
+  struct vhd_keyhash keyhash;  /* nonce & SHA256 hash of encryption key   */
+  char   res[418];        /* reserved                                     */
 };
 
 static const char VHD_BATMAP_COOKIE[9] = "tdbatmap";
Index: blktap3/vhd/lib/libvhd.c
===================================================================
--- blktap3.orig/vhd/lib/libvhd.c
+++ blktap3/vhd/lib/libvhd.c
@@ -49,6 +49,7 @@
 #include <sys/types.h>
 
 #include "debug.h"
+#include "xattr.h"
 #include "libvhd.h"
 #include "relative-path.h"
 #include "canonpath.h"
@@ -211,6 +212,7 @@ vhd_batmap_header_out(vhd_batmap_t *batm
 	BE32_OUT(&batmap->header.batmap_size);
 	BE32_OUT(&batmap->header.batmap_version);
 	BE32_OUT(&batmap->header.checksum);
+	memset(batmap->header.res, 0, sizeof(batmap->header.res));
 }
 
 void
@@ -4436,7 +4438,10 @@ vhd_marker(vhd_context_t *ctx, char *mar
 	*marker = 0;
 
 	if (!vhd_has_batmap(ctx))
-		return -ENOSYS;
+		return xattr_get(ctx->fd,
+				 VHD_XATTR_MARKER,
+				 (void *)marker,
+				 sizeof(*marker));
 
 	err = vhd_read_batmap_header(ctx, &batmap);
 	if (err)
@@ -4453,7 +4458,10 @@ vhd_set_marker(vhd_context_t *ctx, char
 	vhd_batmap_t batmap;
 
 	if (!vhd_has_batmap(ctx))
-		return -ENOSYS;
+		return xattr_set(ctx->fd,
+				 VHD_XATTR_MARKER,
+				 (void *)&marker,
+				 sizeof(marker));
 
 	err = vhd_read_batmap_header(ctx, &batmap);
 	if (err)
@@ -4462,3 +4470,43 @@ vhd_set_marker(vhd_context_t *ctx, char
 	batmap.header.marker = marker;
 	return vhd_write_batmap_header(ctx, &batmap);
 }
+
+int
+vhd_get_keyhash(vhd_context_t *ctx, struct vhd_keyhash *keyhash)
+{
+	int err;
+	vhd_batmap_t batmap;
+
+	if (!vhd_has_batmap(ctx))
+		return xattr_get(ctx->fd,
+				 VHD_XATTR_KEYHASH,
+				 (void *)keyhash,
+				 sizeof(*keyhash));
+
+	err = vhd_read_batmap_header(ctx, &batmap);
+	if (err)
+		return err;
+
+	memcpy(keyhash, &batmap.header.keyhash, sizeof(*keyhash));
+	return 0;
+}
+
+int
+vhd_set_keyhash(vhd_context_t *ctx, const struct vhd_keyhash *keyhash)
+{
+	int err;
+	vhd_batmap_t batmap;
+
+	if (!vhd_has_batmap(ctx))
+		return xattr_set(ctx->fd,
+				 VHD_XATTR_KEYHASH,
+				 (void *)keyhash,
+				 sizeof(*keyhash));
+
+	err = vhd_read_batmap_header(ctx, &batmap);
+	if (err)
+		return err;
+
+	memcpy(&batmap.header.keyhash, keyhash, sizeof(*keyhash));
+	return vhd_write_batmap_header(ctx, &batmap);
+}
Index: blktap3/vhd/lib/vhd-util-read.c
===================================================================
--- blktap3.orig/vhd/lib/vhd-util-read.c
+++ blktap3/vhd/lib/vhd-util-read.c
@@ -248,6 +248,30 @@ vhd_print_parent_locators(vhd_context_t
 }
 
 static void
+vhd_print_keyhash(vhd_context_t *vhd)
+{
+	int ret;
+	struct vhd_keyhash keyhash;
+
+	ret = vhd_get_keyhash(vhd, &keyhash);
+	if (ret)
+		printf("error reading keyhash: %d\n", ret);
+	else if (keyhash.cookie == 1) {
+		int i;
+
+		printf("Batmap keyhash nonce: ");
+		for (i = 0; i < sizeof(keyhash.nonce); i++)
+			printf("%02x", keyhash.nonce[i]);
+
+		printf("\nBatmap keyhash hash : ");
+		for (i = 0; i < sizeof(keyhash.hash); i++)
+			printf("%02x", keyhash.hash[i]);
+
+		printf("\n");
+	}
+}
+
+static void
 vhd_print_batmap_header(vhd_context_t *vhd, vhd_batmap_t *batmap, int hex)
 {
 	uint32_t cksm;
@@ -259,6 +283,7 @@ vhd_print_batmap_header(vhd_context_t *v
 	       conv(hex, batmap->header.batmap_size));
 	printf("Batmap version      : 0x%08x\n",
 	       batmap->header.batmap_version);
+	vhd_print_keyhash(vhd);
 
 	cksm = vhd_checksum_batmap(vhd, batmap);
 	printf("Checksum            : 0x%x|0x%x (%s)\n",
Index: blktap3/vhd/lib/vhd-util-scan.c
===================================================================
--- blktap3.orig/vhd/lib/vhd-util-scan.c
+++ blktap3/vhd/lib/vhd-util-scan.c
@@ -104,6 +104,7 @@ struct vhd_image {
 	off64_t              size;
 	uint8_t              hidden;
 	char                 marker;
+	struct vhd_keyhash   keyhash;
 	int                  error;
 	char                *message;
 
@@ -237,6 +238,7 @@ vhd_util_scan_pretty_add_image(struct vh
 	img->marker   = image->marker;
 	img->error    = image->error;
 	img->message  = image->message;
+	memcpy(&img->keyhash, &image->keyhash, sizeof(img->keyhash));
 
 	img->name = strdup(image->name);
 	if (!img->name)
@@ -296,11 +298,24 @@ vhd_util_scan_print_image_indent(struct
 		printf("%*svhd=%s capacity=%"PRIu64" size=%"PRIu64" hidden=%u "
 		       "parent=%s%s\n", tab, pad, name, image->capacity,
 		       image->size, image->hidden, parent, pmsg);
-	else
-		printf("%*svhd=%s capacity=%"PRIu64" size=%"PRIu64" hidden=%u "
-		       "marker=%u parent=%s%s\n", tab, pad, name,
-		       image->capacity, image->size, image->hidden,
-		       (uint8_t)image->marker, parent, pmsg);
+	else {
+		int i;
+		uint8_t *hash;
+		char *p, str[65];
+
+		str[0] = 0;
+		hash   = image->keyhash.hash;
+
+		if (image->keyhash.cookie)
+			for (i = 0, p = str;
+			     i < sizeof(image->keyhash.hash); i++)
+				p += sprintf(p, "%02x", hash[i]);
+
+ 		printf("%*svhd=%s capacity=%"PRIu64" size=%"PRIu64" hidden=%u "
+		       "marker=%u keyhash=%s parent=%s%s\n", tab, pad, name,
+ 		       image->capacity, image->size, image->hidden,
+		       (uint8_t)image->marker, str, parent, pmsg);
+	}
 }
 
 static void
@@ -590,18 +605,26 @@ vhd_util_scan_get_hidden(vhd_context_t *
 }
 
 static int
-vhd_util_scan_get_marker(vhd_context_t *vhd, struct vhd_image *image)
+vhd_util_scan_get_markers(vhd_context_t *vhd, struct vhd_image *image)
 {
 	int err;
 	char marker;
+	struct vhd_keyhash keyhash;
 
 	err    = 0;
 	marker = 0;
 
-	if (target_vhd(image->target->type) && vhd_has_batmap(vhd))
-		err = vhd_marker(vhd, &marker);
+	if (target_vhd(image->target->type) /* && vhd_has_batmap(vhd) */) {
+ 		err = vhd_marker(vhd, &marker);
+		if (err)
+			return err;
+		err = vhd_get_keyhash(vhd, &keyhash);
+		if (err)
+			return err;
+	}
 
 	image->marker = marker;
+	memcpy(&image->keyhash, &keyhash, sizeof(image->keyhash));
 	return err;
 }
 
@@ -1020,10 +1043,10 @@ vhd_util_scan_targets(int cnt, struct ta
 		}
 
 		if (flags & VHD_SCAN_MARKERS) {
-			err = vhd_util_scan_get_marker(&vhd, &image);
+			err = vhd_util_scan_get_markers(&vhd, &image);
 			if (err) {
 				ret           = -EAGAIN;
-				image.message = "checking marker";
+				image.message = "checking markers";
 				image.error   = err;
 				goto end;
 			}
Index: blktap3/include/vhd-util.h
===================================================================
--- blktap3.orig/include/vhd-util.h
+++ blktap3/include/vhd-util.h
@@ -44,5 +44,6 @@ int vhd_util_modify(int argc, char **arg
 int vhd_util_scan(int argc, char **argv);
 int vhd_util_check(int argc, char **argv);
 int vhd_util_revert(int argc, char **argv);
+int vhd_util_key(int argc, char **argv);
 
 #endif
Index: blktap3/vhd/Makefile.am
===================================================================
--- blktap3.orig/vhd/Makefile.am
+++ blktap3/vhd/Makefile.am
@@ -11,6 +11,6 @@ bin_PROGRAMS  = vhd-util
 bin_PROGRAMS += vhd-index
 bin_PROGRAMS += vhd-update
 
-LDADD = lib/libvhd.la
+LDADD = lib/libvhd.la -luuid -lcrypto
 
-vhd_index_LDADD = lib/libvhd.la -luuid
+vhd_index_LDADD = lib/libvhd.la -luuid -lcrypto
Index: blktap3/vhd/lib/Makefile.am
===================================================================
--- blktap3.orig/vhd/lib/Makefile.am
+++ blktap3/vhd/lib/Makefile.am
@@ -28,17 +28,20 @@ libvhd_la_SOURCES += vhd-util-set-field.
 libvhd_la_SOURCES += vhd-util-snapshot.c
 libvhd_la_SOURCES += vhd-util-scan.c
 libvhd_la_SOURCES += vhd-util-check.c
+libvhd_la_SOURCES += vhd-util-key.c
 libvhd_la_SOURCES += relative-path.c
 libvhd_la_SOURCES += relative-path.h
 libvhd_la_SOURCES += canonpath.c
 libvhd_la_SOURCES += canonpath.h
 libvhd_la_SOURCES += atomicio.c
 libvhd_la_SOURCES += atomicio.h
+libvhd_la_SOURCES += xattr.c
+libvhd_la_SOURCES += xattr.h
 libvhd_la_SOURCES += ../../lvm/lvm-util.c
 
 libvhd_la_LDFLAGS = -version-info 1:1:1
 
-libvhd_la_LIBADD = -luuid $(LIBICONV)
+libvhd_la_LIBADD = -luuid -lcrypto $(LIBICONV)
 
 libvhdio_la_SOURCES  = libvhdio.c
 libvhdio_la_SOURCES += ../../part/partition.c
Index: blktap3/vhd/lib/vhd-util-key.c
===================================================================
--- /dev/null
+++ blktap3/vhd/lib/vhd-util-key.c
@@ -0,0 +1,472 @@
+/*
+ * Copyright (c) 2010, Citrix Systems, Inc.
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of XenSource Inc. nor the names of its contributors
+ *       may be used to endorse or promote products derived from this software
+ *       without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
+ * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <syslog.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+
+#include <openssl/evp.h>
+
+#include "libvhd.h"
+
+#define MAX_KEY_SIZE 512
+
+#define ERR(_f, _a...)						\
+	do {							\
+		syslog(LOG_INFO, "%s: " _f, __func__, ##_a);	\
+		fprintf(stderr, "%s: " _f, __func__, ##_a);	\
+	} while (0)
+
+static int
+vhd_util_read_key(const char *keypath, uint8_t *key,
+		  size_t max_size, size_t *out_size)
+{
+	int fd, err;
+	ssize_t size;
+	struct stat sb;
+
+	fd = open(keypath, O_RDONLY);
+	if (fd == -1) {
+		ERR("failed to open %s: %d\n", keypath, errno);
+		err = -errno;
+		goto out;
+	}
+
+	err = fstat(fd, &sb);
+	if (err) {
+		ERR("failed to stat %s: %d\n", keypath, errno);
+		err = -errno;
+		goto out;
+	}
+
+	size = read(fd, key, max_size);
+	if (size == -1) {
+		ERR("failed to read key: %d\n", errno);
+		err = -errno;
+		goto out;
+	}
+
+	if (size != sb.st_size) {
+		ERR("short read of key\n");
+		err = -EIO;
+		goto out;
+	}
+
+	if (out_size)
+		*out_size = size;
+
+out:
+	if (fd != -1)
+		close(fd);
+	return err;
+}
+
+/*
+ * calculates keyhash by taking a SHA256 hash of @keyhash->nonce + key
+ */
+int
+__vhd_util_calculate_keyhash(struct vhd_keyhash *keyhash,
+			     const uint8_t *key, size_t size)
+{
+	int err;
+	EVP_MD_CTX evp;
+
+	err = -1;
+	EVP_MD_CTX_init(&evp);
+	if (!EVP_DigestInit_ex(&evp, EVP_sha256(), NULL)) {
+		ERR("failed to init sha256 context\n");
+		goto out;
+	}
+
+	if (!EVP_DigestUpdate(&evp, keyhash->nonce, sizeof(keyhash->nonce))) {
+		ERR("failed to hash nonce\n");
+		goto cleanup;
+	}
+
+	if (!EVP_DigestUpdate(&evp, key, size)) {
+		ERR("failed to hash key\n");
+		goto cleanup;
+	}
+
+	if (!EVP_DigestFinal_ex(&evp, keyhash->hash, NULL)) {
+		ERR("failed to finalize hash\n");
+		goto cleanup;
+	}
+
+	err = 0;
+
+cleanup:
+	EVP_MD_CTX_cleanup(&evp);
+out:
+	return err;
+}
+
+static int
+vhd_util_calculate_keyhash(struct vhd_keyhash *keyhash, const char *keypath)
+{
+	int err;
+	size_t size;
+	uint8_t key[MAX_KEY_SIZE];
+
+	size = 0;
+	err = vhd_util_read_key(keypath, key, sizeof(key), &size);
+	if (err) {
+		ERR("failed to read key: %d\n", err);
+		goto out;
+	}
+
+	err = __vhd_util_calculate_keyhash(keyhash, key, size);
+	if (err) {
+		ERR("failed to calculate keyhash: %d\n", err);
+		goto out;
+	}
+
+out:
+	memset(key, 0, sizeof(key));
+	return err;
+}
+
+static int
+vhd_util_set_hex(uint8_t *dst, size_t size, const char *hex)
+{
+	int i, n, err;
+
+	err = 0;
+
+	n = strlen(hex);
+	if (n / 2 != size) {
+		ERR("invalid size for hex string\n");
+		err = -EINVAL;
+		goto out;
+	}
+
+	for (i = 0; i < n; i++) {
+		unsigned char c = (unsigned char)hex[i];
+		switch (c) {
+		case 0:
+			break;
+		case '0'...'9':
+			c -= '0';
+			break;
+		case 'a' ... 'f':
+			c = c - 'a' + 10;
+			break;
+		case 'A' ... 'F':
+			c = c - 'A' + 10;
+			break;
+		default:
+			ERR("invalid hex digit\n");
+			err = -EINVAL;
+			goto out;
+		}
+
+		if (i & 1)
+			dst[i / 2] |= c;
+		else
+			dst[i / 2] = (c << 4);
+	}
+
+out:
+	return err;
+}
+
+static int
+vhd_util_set_keyhash(struct vhd_keyhash *keyhash, const char *keypath,
+		     const char *hash, const char *nonce)
+{
+	int err;
+
+	memset(keyhash, 0, sizeof(*keyhash));
+
+	if (nonce) {
+		err = vhd_util_set_hex(keyhash->nonce,
+				       sizeof(keyhash->nonce), nonce);
+		if (err)
+			goto out;
+	}
+
+	if (hash) {
+		err = vhd_util_set_hex(keyhash->hash,
+				       sizeof(keyhash->hash), hash);
+		if (err)
+			goto out;
+	} else {
+		err = vhd_util_calculate_keyhash(keyhash, keypath);
+		if (err) {
+			ERR("failed to calculate keyhash: %d\n", err);
+			goto out;
+		}
+	}
+
+	keyhash->cookie = 1;
+
+out:
+	return err;
+}
+
+static int
+vhd_util_set_key(vhd_context_t *vhd, const char *keypath,
+		 const char *hash, const char *nonce)
+{
+	int err;
+	struct vhd_keyhash keyhash;
+        uint32_t i, used;
+
+	memset(&keyhash, 0, sizeof(keyhash));
+
+	if (vhd->footer.type == HD_TYPE_FIXED) {
+		ERR("can't save key hashes for fixed vhds\n");
+		err = -EINVAL;
+		goto out;
+	}
+
+	if (keypath && hash) {
+		ERR("can't provide both keyhash and keypath\n");
+		err = -EINVAL;
+		goto out;
+	}
+
+	err = vhd_get_bat(vhd);
+        if (err) {
+            ERR("error reading bat: %d\n", err);
+            goto out;
+        }
+        for (i = 0, used = 0; i < vhd->bat.entries; i++)
+            if (vhd->bat.bat[i] != DD_BLK_UNUSED)
+                used++;
+        if (used != 0) {
+            ERR("can't save key hashes for non-empty vhds\n");
+            err = -EINVAL;
+            goto out;
+        }
+
+
+	err = vhd_util_set_keyhash(&keyhash, keypath, hash, nonce);
+	if (err)
+		goto out;
+
+	err = vhd_set_keyhash(vhd, &keyhash);
+	if (err) {
+		ERR("failed to set keyhash: %d\n", err);
+		goto out;
+	}
+
+out:
+	return err;
+}
+
+static int
+vhd_util_check_key(vhd_context_t *vhd, const char *keypath)
+{
+	int err;
+	struct vhd_keyhash vhdhash, keyhash;
+
+	err = vhd_get_keyhash(vhd, &vhdhash);
+	if (err) {
+		ERR("failed to read keyhash: %d\n", err);
+		goto out;
+	}
+
+	if (!vhdhash.cookie) {
+		ERR("this vhd has no keyhash\n");
+		err = -EINVAL;
+		goto out;
+	}
+
+	memcpy(keyhash.nonce, vhdhash.nonce, sizeof(keyhash.nonce));
+	err = vhd_util_calculate_keyhash(&keyhash, keypath);
+	if (err) {
+		ERR("failed to calculate keyhash: %d\n", err);
+		goto out;
+	}
+
+	if (memcmp(keyhash.hash, vhdhash.hash, sizeof(keyhash.hash))) {
+		ERR("vhd hash doesn't match key hash\n");
+		err = -EINVAL;
+		goto out;
+	}
+
+out:
+	return err;
+}
+
+int
+vhd_util_key(int argc, char **argv)
+{
+	vhd_context_t vhd;
+	const char *name, *nonce, *keypath, *keyhash;
+	int err, c, set, check, print, flags, calc;
+
+	err     = -EINVAL;
+	set     = 0;
+	check   = 0;
+	print   = 0;
+	calc    = 0;
+	name    = NULL;
+	nonce   = NULL;
+	keypath = NULL;
+	keyhash = NULL;
+
+	if (!argc || !argv)
+		goto usage;
+
+	optind = 0;
+	while ((c = getopt(argc, argv, "n:k:N:H:scCph")) != -1) {
+		switch (c) {
+		case 'n':
+			name = optarg;
+			break;
+		case 'k':
+			keypath = optarg;
+			break;
+		case 'N':
+			nonce = optarg;
+			break;
+		case 'H':
+			keyhash = optarg;
+			break;
+		case 's':
+			set = 1;
+			break;
+		case 'c':
+			check = 1;
+			break;
+		case 'C':
+			calc = 1;
+			break;
+		case 'p':
+			print = 1;
+			break;
+		case 'h':
+			err = 0;
+		default:
+			goto usage;
+		}
+	}
+
+	if (optind != argc)
+		goto usage;
+
+	if (calc) {
+		int i;
+		struct vhd_keyhash keyhash;
+		err = vhd_util_set_keyhash(&keyhash, keypath, NULL, nonce);
+		if (err) {
+			ERR("calculating keyhash failed: %d\n", err);
+			goto out;
+		}
+
+		for (i = 0; i < sizeof(keyhash.hash); i++)
+			printf("%02x", keyhash.hash[i]);
+
+		printf("\n");
+		goto out;
+	}
+
+	if (!name)
+		goto usage;
+
+	if (set) {
+		if (check)
+			goto usage;
+
+		if (!(!!keypath ^ !!keyhash))
+			goto usage;
+	} else if (check) {
+		if (!keypath)
+			goto usage;
+
+		if (nonce || keyhash)
+			goto usage;
+	} else if (!print) {
+		goto usage;
+	}
+
+	flags = (set ? VHD_OPEN_RDWR : VHD_OPEN_RDONLY);
+	err = vhd_open(&vhd, name, flags);
+	if (err) {
+		fprintf(stderr, "failed to open %s: %d\n", name, err);
+		goto out;
+	}
+
+	if (set) {
+		err = vhd_util_set_key(&vhd, keypath, keyhash, nonce);
+		if (err)
+			fprintf(stderr, "setting key failed: %d\n", err);
+	} else if (check) {
+		err = vhd_util_check_key(&vhd, keypath);
+		if (err)
+			fprintf(stderr, "key check failed: %d\n", err);
+	}
+
+	if (print) {
+		struct vhd_keyhash keyhash;
+
+		err = vhd_get_keyhash(&vhd, &keyhash);
+		if (err) {
+			fprintf(stderr, "failed to read keyhash: %d\n", err);
+		} else {
+			if (keyhash.cookie != 1)
+				printf("none\n");
+			else {
+				int i;
+
+				for (i = 0; i < sizeof(keyhash.nonce); i++)
+					printf("%02x", keyhash.nonce[i]);
+
+				printf(" ");
+
+				for (i = 0; i < sizeof(keyhash.hash); i++)
+					printf("%02x", keyhash.hash[i]);
+
+				printf("\n");
+			}
+		}
+	}
+
+	vhd_close(&vhd);
+
+out:
+	return err;
+
+usage:
+	fprintf(stderr,
+		"usage:\n"
+		"-C -k KEYPATH [-N NONCE]: calculate keyhash for KEYPATH\n"
+		"-s -n NAME <-k KEYPATH | -H HASH> [-N NONCE]: set keyhash for NAME\n"
+		"-c -n NAME <-k KEYPATH>: check keyhash for NAME\n"
+		"-p -n NAME: print keyhash for NAME\n"
+		"-h help\n");
+	return err;
+}
Index: blktap3/vhd/vhd-util.c
===================================================================
--- blktap3.orig/vhd/vhd-util.c
+++ blktap3/vhd/vhd-util.c
@@ -67,6 +67,7 @@ struct command commands[] = {
 	{ .name = "scan",        .func = vhd_util_scan          },
 	{ .name = "check",       .func = vhd_util_check         },
 	{ .name = "revert",      .func = vhd_util_revert        },
+	{ .name = "key",         .func = vhd_util_key           },
 };
 
 #define print_commands()					\
Index: blktap3/vhd/lib/xattr.c
===================================================================
--- /dev/null
+++ blktap3/vhd/lib/xattr.c
@@ -0,0 +1,110 @@
+#include "xattr.h"
+
+#include <errno.h>
+#include <unistd.h>
+#include <string.h>
+#include <features.h>
+
+#ifndef ENOATTR
+# define ENOATTR ENODATA        /* No such attribute */
+#endif
+
+#if defined (__i386__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		228
+# define __NR_fgetxattr		231
+#elif defined (__sparc__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		171
+# define __NR_fgetxattr		177
+#elif defined (__ia64__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		1219
+# define __NR_fgetxattr		1222
+#elif defined (__powerpc__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		211
+# define __NR_fgetxattr		214
+#elif defined (__x86_64__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		190
+# define __NR_fgetxattr		193
+#elif defined (__s390__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		226
+# define __NR_fgetxattr		229
+#elif defined (__arm__)
+# define HAVE_XATTR_SYSCALLS 1
+# if defined(__ARM_EABI__) || defined(__thumb__)
+#  define __NR_SYSCALL_BASE 0
+# else
+#  define __NR_SYSCALL_BASE 0x900000
+# endif
+# define __NR_fsetxattr		(__NR_SYSCALL_BASE+228)
+# define __NR_fgetxattr		(__NR_SYSCALL_BASE+231)
+#elif defined (__mips64)
+# define HAVE_XATTR_SYSCALLS 1
+# ifdef __LP64__ /* mips64 using n64 ABI */
+#  define __NR_Linux 5000
+# else /* mips64 using n32 ABI */
+#  define __NR_Linux 6000
+# endif
+# define __NR_fsetxattr		(__NR_Linux + 182)
+# define __NR_fgetxattr		(__NR_Linux + 185)
+#elif defined (__mips__) /* mips32, or mips64 using o32 ABI */
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_Linux 4000
+# define __NR_fsetxattr		(__NR_Linux + 226)
+# define __NR_fgetxattr		(__NR_Linux + 229)
+#elif defined (__alpha__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		384
+# define __NR_fgetxattr		387
+#elif defined (__mc68000__)
+# define HAVE_XATTR_SYSCALLS 1
+# define __NR_fsetxattr		225
+# define __NR_fgetxattr		228
+#else
+# warning "Extended attribute syscalls undefined for this architecture"
+# define HAVE_XATTR_SYSCALLS 0
+#endif
+
+#if HAVE_XATTR_SYSCALLS
+# define SYSCALL(args...)	syscall(args)
+#else
+# define SYSCALL(args...)	( errno = ENOSYS, -1 )
+#endif
+
+static ssize_t
+_fgetxattr(int fd, const char *name, void *value, size_t size)
+{
+	return SYSCALL(__NR_fgetxattr, fd, name, value, size);
+}
+
+static int
+_fsetxattr(int fd, const char *name, const void *value, size_t size, int flags)
+{
+	return SYSCALL(__NR_fsetxattr, fd, name, value, size, flags);
+}
+
+int
+xattr_get(int fd, const char *name, void *value, size_t size)
+{
+	if (_fgetxattr(fd, name, value, size) == -1) {
+		if (errno == ENOATTR) {
+			memset(value, 0, size);
+			return 0;
+		}
+		return -errno;
+	}
+
+	return 0;
+}
+
+int
+xattr_set(int fd, const char *name, const void *value, size_t size)
+{
+	if (_fsetxattr(fd, name, value, size, 0) == -1)
+		return -errno;
+	return 0;
+}
Index: blktap3/vhd/lib/xattr.h
===================================================================
--- /dev/null
+++ blktap3/vhd/lib/xattr.h
@@ -0,0 +1,12 @@
+#ifndef VHD_XATTR_H
+#define VHD_XATTR_H
+
+#include <sys/types.h>
+
+#define VHD_XATTR_MARKER  "user.com.citrix.xenclient.backend.marker"
+#define VHD_XATTR_KEYHASH "user.com.citrix.xenclient.backend.keyhash"
+
+int xattr_get(int, const char *, void *, size_t);
+int xattr_set(int, const char *, const void *, size_t);
+
+#endif
Index: blktap3/vhd/lib/vhd-util-query.c
===================================================================
--- blktap3.orig/vhd/lib/vhd-util-query.c
+++ blktap3/vhd/lib/vhd-util-query.c
@@ -46,7 +46,7 @@ vhd_util_query(int argc, char **argv)
 	char *name;
 	vhd_context_t vhd;
 	off64_t currsize;
-	int ret, err, c, size, physize, parent, fields, depth, fastresize, marker;
+	int ret, err, c, size, physize, parent, fields, depth, fastresize, marker, allocated;
 
 	name       = NULL;
 	size       = 0;
@@ -56,6 +56,7 @@ vhd_util_query(int argc, char **argv)
 	depth      = 0;
 	fastresize = 0;
 	marker     = 0;
+	allocated  = 0;
 
 	if (!argc || !argv) {
 		err = -EINVAL;
@@ -63,7 +64,7 @@ vhd_util_query(int argc, char **argv)
 	}
 
 	optind = 0;
-	while ((c = getopt(argc, argv, "n:vspfdSmh")) != -1) {
+	while ((c = getopt(argc, argv, "n:vspfdSmah")) != -1) {
 		switch (c) {
 		case 'n':
 			name = optarg;
@@ -89,6 +90,9 @@ vhd_util_query(int argc, char **argv)
 		case 'm':
 			marker = 1;
 			break;
+		case 'a':
+			allocated = 1;
+			break;
 		case 'h':
 			err = 0;
 			goto usage;
@@ -176,6 +180,23 @@ vhd_util_query(int argc, char **argv)
 		err = (err ? : ret);
 	}
 
+	if (allocated) {
+		ret = vhd_get_bat(&vhd);
+		if (ret)
+			printf("error reading bat: %d\n", ret);
+		else {
+			uint32_t i, used;
+
+			for (i = 0, used = 0; i < vhd.bat.entries; i++)
+				if (vhd.bat.bat[i] != DD_BLK_UNUSED)
+					used++;
+
+			printf("%u\n", used);
+		}
+
+		err = (err ? : ret);
+	}
+
 	if (fastresize) {
 		uint64_t max_size;
 
@@ -190,6 +211,7 @@ usage:
 	printf("options: <-n name> [-v print virtual size (in MB)] "
 	       "[-s print physical utilization (bytes)] [-p print parent] "
 	       "[-f print fields] [-m print marker] [-d print chain depth] "
-	       "[-S print max virtual size (MB) for fast resize] [-h help]\n");
+	       "[-S print max virtual size (MB) for fast resize] "
+	       "[-a print allocated block count] [-h help]\n");
 	return err;
 }
Index: blktap3/drivers/block-crypto.c
===================================================================
--- blktap3.orig/drivers/block-crypto.c
+++ blktap3/drivers/block-crypto.c
@@ -55,7 +55,6 @@ struct keystore_entry {
     struct vhd_keyhash  keyhash;
 };
 
-#static LIST_HEAD(keystore);
 static struct list_head keystore = LIST_HEAD_INIT(keystore);
 
 int __vhd_util_calculate_keyhash(struct vhd_keyhash *, const uint8_t *, size_t);
@@ -408,7 +407,6 @@ vhd_open_crypto(vhd_context_t *vhd, cons
 	int err;
         uint8_t key[MAX_AES_XTS_PLAIN_KEYSIZE / 8] = { 0 };
         int keysize = 0;
-        vhd_context_t *keyed_vhd = NULL;
 
 	if (vhd->xts_tfm)
 		return 0;
Index: blktap3/drivers/Makefile.am
===================================================================
--- blktap3.orig/drivers/Makefile.am
+++ blktap3/drivers/Makefile.am
@@ -1,6 +1,6 @@
 SUBDIRS = crypto
 AM_CFLAGS  = -Wall
-AM_CFLAGS += -Werror
+AM_CFLAGS += -Werror -Wno-unused-function
 AM_CFLAGS += -DXC_WANT_COMPAT_EVTCHN_API -DXC_WANT_COMPAT_GNTTAB_API
 # TODO add -Wextra
 
@@ -11,11 +11,11 @@ CRYPTLIBS = -lcrypto -Lcrypto -lxts-aes
 libexec_PROGRAMS = tapdisk
 
 tapdisk_SOURCES = tapdisk2.c
-tapdisk_LDADD = libtapdisk.la $(CRYPTLIBS)
+tapdisk_LDADD = libtapdisk.la crypto/libxts-aes.la $(CRYPTLIBS)
 
 noinst_PROGRAMS = tapdisk-stream
 
-tapdisk_stream_LDADD = libtapdisk.la $(CRYPTLIBS)
+tapdisk_stream_LDADD = libtapdisk.la crypto/libxts-aes.la $(CRYPTLIBS)
 
 sbin_PROGRAMS  = td-util
 sbin_PROGRAMS += td-rated
@@ -103,6 +103,10 @@ libtapdisk_la_SOURCES += td-ctx.h
 libtapdisk_la_SOURCES += td-stats.c
 libtapdisk_la_SOURCES += td-stats.h
 
+# encryption support
+libtapdisk_la_SOURCES += crypto/xts_aes.c
+libtapdisk_la_SOURCES += crypto/xts_aes.h
+
 libtapdisk_la_LIBADD  = ../vhd/lib/libvhd.la
 libtapdisk_la_LIBADD += -laio
 libtapdisk_la_LIBADD += -lxenctrl
