--- a/Main.hs
+++ b/Main.hs
@@ -139,13 +139,13 @@ implementNetworkSlaveNMInterface = do
     }
 
 emitCloseMenuSignal = do
-    (exitCode, out, _) <- liftIO $ readProcessWithExitCode_closeFds "dbus-send" ["--system", "--type=signal", "/", "com.citrix.xenclient.xui.close_network_menu"] []
+    (exitCode, out, _) <- liftIO $ readProcessWithExitCode_closeFds "dbus-send" ["--system", "--type=method_call", "--dest=com.openxt", "/", "com.openxt.nmapplet.close_network_menu"] []
     unless (exitCode == ExitSuccess) $ debug $ printf "Error when emitting close_network_menu signal: %s"  out
     return ()
    
 emitPopupMenuSignal :: Word32 -> Word32 -> Rpc ()
 emitPopupMenuSignal x_off y_off = do 
-    (exitCode, out, _) <- liftIO $ readProcessWithExitCode_closeFds "dbus-send" ["--system", "--type=signal", "/", "com.citrix.xenclient.xui.popup_network_menu", x_arg, y_arg] []
+    (exitCode, out, _) <- liftIO $ readProcessWithExitCode_closeFds "dbus-send" ["--system", "--type=method_call", "--dest=com.openxt", "/", "com.openxt.nmapplet.popup_network_menu", x_arg, y_arg] []
     unless (exitCode == ExitSuccess) $ debug $ printf "Error when emitting popup_network_menu signal: %s"  out
     return ()
 
--- a/NetworkInterface.hs
+++ b/NetworkInterface.hs
@@ -76,35 +76,6 @@ import Rpc.Autogen.NmActiveConnectionCli
 anyBridge = "brany"
 anyNwObj = "/any"
 
-bridgeSetting :: String -> String -- monomorphism
-bridgeSetting = printf "/etc/NetworkManager/system-connections/%s"
-slaveSetting :: String -> String -- monomorphism
-slaveSetting = printf "/etc/NetworkManager/system-connections/%s-slave"
-
-addConnectionSettings :: String -> String -> IO ()
-addConnectionSettings bridge iface = do
-    createDirectoryIfMissing False "/etc/NetworkManager/system-connections"
-    generateBridgeSetting bridge
-    generateSlaveSetting bridge
-    return ()
-
-    where
-        bridgeTemplate = "/etc/network-daemon/bridge-connection"
-        slaveTemplate = "/etc/network-daemon/slave-connection"
-
-        fill bridge uuid = T.replace (T.pack "<BRIDGE>") (T.pack bridge)
-                         . T.replace (T.pack "<UUID>") (T.pack uuid)
-                         . T.replace (T.pack "<IFACE>") (T.pack iface)
-
-        generateSettingsFile bridge template target = do
-                    settingStr <- liftIO $ readFile template
-                    uuid <- liftIO $ uuidGen
-                    let settings = T.unpack $ fill bridge (uuid :: String) $ T.pack settingStr
-                    writeFile target settings
-
-        generateBridgeSetting bridge = generateSettingsFile bridge bridgeTemplate (bridgeSetting bridge)
-        generateSlaveSetting bridge = generateSettingsFile bridge slaveTemplate  (slaveSetting bridge)
-
 isWired :: NetworkObj -> Bool
 isWired network = network =~ "wired" :: Bool
 
@@ -463,13 +434,6 @@ configureSharedNetwork brshared interfac
 configureBridgedNetwork :: String -> String -> String -> String -> IO ()
 configureBridgedNetwork bridge interface nwType nwMac = do
     debug $ printf "configureBridgedNetwork : %s %s %s %s" bridge interface nwType nwMac
-    exists <- bridgeExists bridge
-    case exists of
-        False -> do
-                   addConnectionSettings bridge interface
-                   return ()
-        otherwise -> do
-                       return ()
     checkAndAddBridgeFwd bridge
     disableReversePathFilter bridge
     readProcessOrDie "ifconfig" [interface, "0.0.0.0", "up", "promisc"] []
